{"version":3,"file":"index.node.js","sources":["../../src/ts/index.ts"],"sourcesContent":["/**\n * Scrypt using MCF for both browsers and Node.js\n *\n * @packageDocumentation\n */\nimport { decode as b64decode, encode as b64encode } from '@juanelas/base64'\nimport { salt as getRandomSalt, scrypt, ScryptParams as ScryptPbkdfParams } from 'scrypt-pbkdf'\n\nexport interface ScryptParams {\n  logN?: number\n  r?: number\n  p?: number\n}\n\nexport interface ScryptMcfOptions {\n  saltBase64NoPadding?: string // a scrypt salt (16 bytes) in base64 with no padding (22 characters)\n  derivedKeyLength?: number // the expected length of the output key\n  scryptParams?: ScryptParams // scrypt parameters\n}\n\n/**\n * Computes a MFC string derived using scrypt on input password\n *\n * @param password - the password\n * @param options - optional 16 bytes/22 characters salt in base64 with no padding (a fresh random one is created if not provided), derivedKeyLength (defaults to 32 bytes), and scrypt parameters (defaults to { logN: 17, r: 8, p: 1 })\n * @returns a MFC string with the format $scrypt$ln=<cost>,r=<blocksize>,p=<parallelism>$<salt in base64 no padding>$<hash in base64 no padding>\n */\nexport async function hash (password: string, options?: ScryptMcfOptions): Promise<string> {\n  const scryptParams: Required<ScryptParams> = {\n    logN: 17,\n    r: 8,\n    p: 1,\n    ...options?.scryptParams\n  }\n  const scryptPbkdfParams: ScryptPbkdfParams = {\n    N: 2 ** scryptParams.logN,\n    r: scryptParams.r,\n    p: scryptParams.p\n  }\n  const S = (options?.saltBase64NoPadding !== undefined) ? b64decode(options.saltBase64NoPadding) : getRandomSalt()\n  const SBase64 = b64encode(S, false, false)\n  const derivedKeyLength = options?.derivedKeyLength ?? 32\n  const hash = b64encode(await scrypt(password, S, derivedKeyLength, scryptPbkdfParams), false, false)\n  return `$scrypt$ln=${scryptParams.logN},r=${scryptParams.r},p=${scryptParams.p}$${SBase64}$${hash}`\n}\n\n/**\n * Verify if provided password meets the stored hash (in MCF)\n * @param mcf - a MFC string with the format $scrypt$ln=<cost>,r=<blocksize>,p=<parallelism>$<salt in base64 no padding>$<hash in base64 no padding>\n * @param password - the password to test\n * @returns\n */\nexport async function verify (password: string, mcf: string): Promise<boolean> {\n  const regex = /^\\$scrypt\\$ln=(\\d{1,2}),r=(\\d{1,2}),p=(\\d{1,2})\\$([a-zA-Z0-9/+]{22})\\$([a-zA-Z0-9/+]{22,})$/g\n\n  const matches = [...mcf.matchAll(regex)]\n\n  if (matches.length !== 1) {\n    throw new Error('Invalid MCFstring format')\n  }\n\n  const logN = Number(matches[0][1])\n  const r = Number(matches[0][2])\n  const p = Number(matches[0][3])\n  const S = matches[0][4]\n  const derivedKeyLength = 2 ** (Math.floor(Math.log2(matches[0][5].length * 6)) - 3)\n\n  const passwordMfc = await hash(password, {\n    saltBase64NoPadding: S,\n    scryptParams: { logN, r, p },\n    derivedKeyLength\n  })\n\n  return passwordMfc === mcf\n}\n"],"names":["async","hash","password","options","scryptParams","logN","r","p","scryptPbkdfParams","N","S","undefined","saltBase64NoPadding","b64decode","getRandomSalt","SBase64","b64encode","derivedKeyLength","scrypt","verify","mcf","matches","matchAll","length","Error","Number","Math","floor","log2"],"mappings":"sGA2BOA,eAAeC,EAAMC,EAAkBC,GAC5C,MAAMC,EAAuC,CAC3CC,KAAM,GACNC,EAAG,EACHC,EAAG,KACAJ,GAASC,cAERI,EAAuC,CAC3CC,EAAG,GAAKL,EAAaC,KACrBC,EAAGF,EAAaE,EAChBC,EAAGH,EAAaG,GAEZG,OAAsCC,IAAjCR,GAASS,oBAAqCC,EAAUV,EAAQS,qBAAuBE,IAC5FC,EAAUC,EAAUN,GAAG,GAAO,GAC9BO,EAAmBd,GAASc,kBAAoB,GAChDhB,EAAOe,QAAgBE,EAAOhB,EAAUQ,EAAGO,EAAkBT,IAAoB,GAAO,GAC9F,MAAO,cAAcJ,EAAaC,UAAUD,EAAaE,OAAOF,EAAaG,KAAKQ,KAAWd,GAC/F,CAQOD,eAAemB,EAAQjB,EAAkBkB,GAC9C,MAEMC,EAAU,IAAID,EAAIE,SAFV,iGAId,GAAuB,IAAnBD,EAAQE,OACV,MAAM,IAAIC,MAAM,4BAGlB,MAAMnB,EAAOoB,OAAOJ,EAAQ,GAAG,IACzBf,EAAImB,OAAOJ,EAAQ,GAAG,IACtBd,EAAIkB,OAAOJ,EAAQ,GAAG,IACtBX,EAAIW,EAAQ,GAAG,GACfJ,EAAmB,IAAMS,KAAKC,MAAMD,KAAKE,KAA4B,EAAvBP,EAAQ,GAAG,GAAGE,SAAe,GAQjF,aAN0BtB,EAAKC,EAAU,CACvCU,oBAAqBF,EACrBN,aAAc,CAAEC,OAAMC,IAAGC,KACzBU,uBAGqBG,CACzB"}