import{decode as r,encode as t}from"@juanelas/base64";import{salt as a,scrypt as n}from"scrypt-pbkdf";async function o(o,e){const s={logN:17,r:8,p:1,...e?.scryptParams},l={N:2**s.logN,r:s.r,p:s.p},d=void 0!==e?.saltBase64NoPadding?r(e.saltBase64NoPadding):a(),p=t(d,!1,!1),i=e?.derivedKeyLength??32,g=t(await n(o,d,i,l),!1,!1);return`$scrypt$ln=${s.logN},r=${s.r},p=${s.p}$${p}$${g}`}async function e(r,t){const a=[...t.matchAll(/^\$scrypt\$ln=(\d{1,2}),r=(\d{1,2}),p=(\d{1,2})\$([a-zA-Z0-9/+]{22})\$([a-zA-Z0-9/+]{22,})$/g)];if(1!==a.length)throw new Error("Invalid MCFstring format");const n=Number(a[0][1]),e=Number(a[0][2]),s=Number(a[0][3]),l=a[0][4],d=2**(Math.floor(Math.log2(6*a[0][5].length))-3);return await o(r,{saltBase64NoPadding:l,scryptParams:{logN:n,r:e,p:s},derivedKeyLength:d})===t}export{o as hash,e as verify};
//# sourceMappingURL=index.browser.js.map
